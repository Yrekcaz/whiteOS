// Autogenerated C++ message buffer code.
// Source: clad/types/loadedKnownFace.clad
// Full command line: victor-clad/tools/message-buffers/emitters/CPP_emitter.py --output-union-helper-constructors -C sdk -I victor-clad/clad/sdk -o generated/clad clad/types/loadedKnownFace.clad

#include "loadedKnownFace.h"

namespace Anki {

namespace Vision {

// MESSAGE LoadedKnownFace

LoadedKnownFace::LoadedKnownFace(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

LoadedKnownFace::LoadedKnownFace(const uint8_t* buff, size_t len)
: LoadedKnownFace::LoadedKnownFace({const_cast<uint8_t*>(buff), len, false})
{
}

size_t LoadedKnownFace::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t LoadedKnownFace::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  buffer.Write(this->secondsSinceFirstEnrolled);
  buffer.Write(this->secondsSinceLastUpdated);
  buffer.Write(this->secondsSinceLastSeen);
  buffer.Write(this->lastSeenSecondsSinceEpoch);
  buffer.Write(this->faceID);
  buffer.WritePString<uint8_t>(this->name);
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t LoadedKnownFace::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t LoadedKnownFace::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  buffer.Read(this->secondsSinceFirstEnrolled);
  buffer.Read(this->secondsSinceLastUpdated);
  buffer.Read(this->secondsSinceLastSeen);
  buffer.Read(this->lastSeenSecondsSinceEpoch);
  buffer.Read(this->faceID);
  buffer.ReadPString<uint8_t>(this->name);
  return buffer.GetBytesRead();
}

size_t LoadedKnownFace::Size() const
{
  size_t result = 0;
  // secondsSinceFirstEnrolled
  result += 8; // int_64
  // secondsSinceLastUpdated
  result += 8; // int_64
  // secondsSinceLastSeen
  result += 8; // int_64
  // lastSeenSecondsSinceEpoch
  result += 8; // int_64
  // faceID
  result += 4; // int_32
  // name
  result += 1; // uint_8 (string length)
  result += this->name.length(); // uint_8
  return result;
}

bool LoadedKnownFace::operator==(const LoadedKnownFace& other) const
{
  return (this->secondsSinceFirstEnrolled == other.secondsSinceFirstEnrolled &&
    this->secondsSinceLastUpdated == other.secondsSinceLastUpdated &&
    this->secondsSinceLastSeen == other.secondsSinceLastSeen &&
    this->lastSeenSecondsSinceEpoch == other.lastSeenSecondsSinceEpoch &&
    this->faceID == other.faceID &&
    this->name == other.name);
}

bool LoadedKnownFace::operator!=(const LoadedKnownFace& other) const
{
  return !(operator==(other));
}


const char* LoadedKnownFaceVersionHashStr = "68b2f6561c39c383fc29d2530d56f005";

const uint8_t LoadedKnownFaceVersionHash[16] = { 
    0x68, 0xb2, 0xf6, 0x56, 0x1c, 0x39, 0xc3, 0x83, 0xfc, 0x29, 0xd2, 0x53, 0xd, 0x56, 0xf0, 0x5 
};

// MESSAGE RobotRenamedEnrolledFace

RobotRenamedEnrolledFace::RobotRenamedEnrolledFace(const CLAD::SafeMessageBuffer& buffer)

{
  Unpack(buffer);
}

RobotRenamedEnrolledFace::RobotRenamedEnrolledFace(const uint8_t* buff, size_t len)
: RobotRenamedEnrolledFace::RobotRenamedEnrolledFace({const_cast<uint8_t*>(buff), len, false})
{
}

size_t RobotRenamedEnrolledFace::Pack(uint8_t* buff, size_t len) const
{
  CLAD::SafeMessageBuffer buffer(buff, len, false);
  return Pack(buffer);
}

size_t RobotRenamedEnrolledFace::Pack(CLAD::SafeMessageBuffer& buffer) const
{
  buffer.Write(this->faceID);
  buffer.WritePString<uint8_t>(this->name);
  const size_t bytesWritten {buffer.GetBytesWritten()};
  return bytesWritten;
}

size_t RobotRenamedEnrolledFace::Unpack(const uint8_t* buff, const size_t len)
{
  const CLAD::SafeMessageBuffer buffer(const_cast<uint8_t*>(buff), len, false);
  return Unpack(buffer);
}

size_t RobotRenamedEnrolledFace::Unpack(const CLAD::SafeMessageBuffer& buffer)
{
  buffer.Read(this->faceID);
  buffer.ReadPString<uint8_t>(this->name);
  return buffer.GetBytesRead();
}

size_t RobotRenamedEnrolledFace::Size() const
{
  size_t result = 0;
  // faceID
  result += 4; // int_32
  // name
  result += 1; // uint_8 (string length)
  result += this->name.length(); // uint_8
  return result;
}

bool RobotRenamedEnrolledFace::operator==(const RobotRenamedEnrolledFace& other) const
{
  return (this->faceID == other.faceID &&
    this->name == other.name);
}

bool RobotRenamedEnrolledFace::operator!=(const RobotRenamedEnrolledFace& other) const
{
  return !(operator==(other));
}


const char* RobotRenamedEnrolledFaceVersionHashStr = "b88cb003022c75948cc12ff4c6912877";

const uint8_t RobotRenamedEnrolledFaceVersionHash[16] = { 
    0xb8, 0x8c, 0xb0, 0x3, 0x2, 0x2c, 0x75, 0x94, 0x8c, 0xc1, 0x2f, 0xf4, 0xc6, 0x91, 0x28, 0x77 
};

} // namespace Vision

} // namespace Anki

