// Autogenerated C++ message buffer code.
// Source: clad/types/loadedKnownFace.clad
// Full command line: victor-clad/tools/message-buffers/emitters/CPP_emitter.py --output-union-helper-constructors -C sdk -I victor-clad/clad/sdk -o generated/clad clad/types/loadedKnownFace.clad

#ifndef __CLAD_TYPES_LOADED_KNOWN_FACE_H__
#define __CLAD_TYPES_LOADED_KNOWN_FACE_H__

#include <CLAD/SafeMessageBuffer.h>
#include <array>
#include <cassert>
#include <cstdint>
#include <string>
#include <vector>

namespace Anki {

namespace Vision {

// MESSAGE LoadedKnownFace
struct LoadedKnownFace
{
  int64_t secondsSinceFirstEnrolled;
  int64_t secondsSinceLastUpdated;
  int64_t secondsSinceLastSeen;
  int64_t lastSeenSecondsSinceEpoch;
  int32_t faceID;
  std::string name;
  
  /**** Constructors ****/
  LoadedKnownFace() = default;
  LoadedKnownFace(const LoadedKnownFace& other) = default;
  LoadedKnownFace(LoadedKnownFace& other) = default;
  LoadedKnownFace(LoadedKnownFace&& other) noexcept = default;
  LoadedKnownFace& operator=(const LoadedKnownFace& other) = default;
  LoadedKnownFace& operator=(LoadedKnownFace&& other) = default;
  
  explicit LoadedKnownFace(int64_t secondsSinceFirstEnrolled,
    int64_t secondsSinceLastUpdated,
    int64_t secondsSinceLastSeen,
    int64_t lastSeenSecondsSinceEpoch,
    int32_t faceID,
    const std::string& name)
  : secondsSinceFirstEnrolled(secondsSinceFirstEnrolled)
  , secondsSinceLastUpdated(secondsSinceLastUpdated)
  , secondsSinceLastSeen(secondsSinceLastSeen)
  , lastSeenSecondsSinceEpoch(lastSeenSecondsSinceEpoch)
  , faceID(faceID)
  , name(name)
  {}
  
  explicit LoadedKnownFace(const uint8_t* buff, size_t len);
  explicit LoadedKnownFace(const CLAD::SafeMessageBuffer& buffer);
  
  /**** Pack ****/
  size_t Pack(uint8_t* buff, size_t len) const;
  size_t Pack(CLAD::SafeMessageBuffer& buffer) const;
  
  /**** Unpack ****/
  size_t Unpack(const uint8_t* buff, const size_t len);
  size_t Unpack(const CLAD::SafeMessageBuffer& buffer);
  
  size_t Size() const;
  
  bool operator==(const LoadedKnownFace& other) const;
  bool operator!=(const LoadedKnownFace& other) const;
  
  template <typename Callable>
  void Invoke(Callable&& func) const {
     func(secondsSinceFirstEnrolled, secondsSinceLastUpdated, secondsSinceLastSeen, lastSeenSecondsSinceEpoch, faceID, name);
  }
};

extern const char* LoadedKnownFaceVersionHashStr;
extern const uint8_t LoadedKnownFaceVersionHash[16];

// MESSAGE RobotRenamedEnrolledFace
struct RobotRenamedEnrolledFace
{
  int32_t faceID;
  std::string name;
  
  /**** Constructors ****/
  RobotRenamedEnrolledFace() = default;
  RobotRenamedEnrolledFace(const RobotRenamedEnrolledFace& other) = default;
  RobotRenamedEnrolledFace(RobotRenamedEnrolledFace& other) = default;
  RobotRenamedEnrolledFace(RobotRenamedEnrolledFace&& other) noexcept = default;
  RobotRenamedEnrolledFace& operator=(const RobotRenamedEnrolledFace& other) = default;
  RobotRenamedEnrolledFace& operator=(RobotRenamedEnrolledFace&& other) = default;
  
  explicit RobotRenamedEnrolledFace(int32_t faceID,
    const std::string& name)
  : faceID(faceID)
  , name(name)
  {}
  
  explicit RobotRenamedEnrolledFace(const uint8_t* buff, size_t len);
  explicit RobotRenamedEnrolledFace(const CLAD::SafeMessageBuffer& buffer);
  
  /**** Pack ****/
  size_t Pack(uint8_t* buff, size_t len) const;
  size_t Pack(CLAD::SafeMessageBuffer& buffer) const;
  
  /**** Unpack ****/
  size_t Unpack(const uint8_t* buff, const size_t len);
  size_t Unpack(const CLAD::SafeMessageBuffer& buffer);
  
  size_t Size() const;
  
  bool operator==(const RobotRenamedEnrolledFace& other) const;
  bool operator!=(const RobotRenamedEnrolledFace& other) const;
  
  template <typename Callable>
  void Invoke(Callable&& func) const {
     func(faceID, name);
  }
};

extern const char* RobotRenamedEnrolledFaceVersionHashStr;
extern const uint8_t RobotRenamedEnrolledFaceVersionHash[16];

} // namespace Vision

} // namespace Anki

#endif // __CLAD_TYPES_LOADED_KNOWN_FACE_H__
